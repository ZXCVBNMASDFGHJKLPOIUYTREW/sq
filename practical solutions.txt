

Q2]

mysql> create table Employee(emp_id int PRIMARY KEY,name varchar(30),salary int,plan_no int,address varchar(30));
Query OK, 0 rows affected (0.02 sec)

mysql> create table machine(machine_no int PRIMARY KEY,type varchar(30),plan_no int);
Query OK, 0 rows affected (0.01 sec)

mysql> insert into Employee values(101,'ekbaal','120000',1,'ratna');
Query OK, 1 row affected (0.00 sec)

mysql> insert into Employee values(102,'dobaal','1410',2,'fsffsf');
Query OK, 1 row affected (0.00 sec)

mysql> insert into Employee values(107,'teenbaal','14100',3,'bihar');
Query OK, 1 row affected (0.00 sec)

mysql> insert into machine values(10,'mill',1);
Query OK, 1 row affected (0.00 sec)

mysql> insert into machine values(11,'mill',2);
Query OK, 1 row affected (0.00 sec)

mysql> insert into machine values(12,'till',3);
Query OK, 1 row affected (0.00 sec)

mysql> select * from Employee;
+--------+----------+--------+---------+---------+
| emp_id | name     | salary | plan_no | address |
+--------+----------+--------+---------+---------+
|    101 | ekbaal   | 120000 |       1 | ratna   |
|    102 | dobaal   |   1410 |       2 | fsffsf  |
|    107 | teenbaal |  14100 |       3 | bihar   |
+--------+----------+--------+---------+---------+
3 rows in set (0.00 sec)

mysql> select * from machine;
+------------+------+---------+
| machine_no | type | plan_no |
+------------+------+---------+
|         10 | mill |       1 |
|         11 | mill |       2 |
|         12 | till |       3 |
+------------+------+---------+
3 rows in set (0.00 sec)

mysql> select name from Employee where salary=(Select max(salary) from employee);
+--------+
| name   |
+--------+
| ekbaal |
+--------+

Table: EMPLOYEE
Columns: name, address, salary, emp_id, plant_no

Table: MACHINE
Columns: machine_no, type, plant_no
Now, let's move on to the queries:

Find the employee that has the maximum salary.
sql
Copy code
SELECT *
FROM EMPLOYEE
WHERE salary = (SELECT MAX(salary) FROM EMPLOYEE);
Display all employees plant-wise.
sql
Copy code
SELECT *
FROM EMPLOYEE
ORDER BY plant_no;
Display information of the machine which belongs to the same plant to which employee E104 belongs.
sql
Copy code
SELECT *
FROM MACHINE
WHERE plant_no = (SELECT plant_no FROM EMPLOYEE WHERE emp_id = 'E104');
Display machine information where the type of machine is ‘Mill’.
sql
Copy code
SELECT *
FROM MACHINE
WHERE type = 'Mill';

Q3]Table: BOOK
Columns: book_id, author, topic, price

Table: BOOKSTORE
Columns: store_id, city, qtysold

Table: STOCK
Columns: store_id, book_id, qty_in_stock
Now, let's proceed with the queries:

Give the details of the book with a stock quantity greater than 35.
sql
Copy code
SELECT B.*
FROM BOOK B
JOIN STOCK S ON B.book_id = S.book_id
WHERE S.qty_in_stock > 35;
List the book information in descending order of price.
sql
Copy code
SELECT *
FROM BOOK
ORDER BY price DESC;
Find the book whose author's name starts with the letter ‘S’.
sql
Copy code
SELECT *
FROM BOOK
WHERE author LIKE 'S%';
Implement the default constraint for the city (assuming SQL syntax).
sql
Copy code
ALTER TABLE BOOKSTORE
ALTER COLUMN city SET DEFAULT 'Unknown';

Q4]

Table: CLIENT
Columns: client_no, name, city, balance_due

Table: PRODUCT
Columns: prod_no, profit_percentage, qty_on_hand, selling_price

Table: PURCHASE
Columns: client_no, prod_no, qty
Now, let's move on to the queries:

Find the clients who have purchased a product with a quantity greater than 15.
sql
Copy code
SELECT DISTINCT C.*
FROM CLIENT C
JOIN PURCHASE P ON C.client_no = P.client_no
WHERE P.qty > 15;
Find all clients who live in ‘Panvel’.
sql
Copy code
SELECT *
FROM CLIENT
WHERE city = 'Panvel';
Find all products where profit percentage is greater than 50.
sql
Copy code
SELECT *
FROM PRODUCT
WHERE profit_percentage > 50;
Create a view that displays client name and the number of products purchased by him.
sql
Copy code
CREATE VIEW ClientProductCount AS
SELECT C.name AS client_name, COUNT(P.prod_no) AS product_count
FROM CLIENT C
LEFT JOIN PURCHASE P ON C.client_no = P.client_no
GROUP BY C.client_no, C.name;

Q5]
Table: STUDENT
Columns: stu_no, name, date_of_birth

Table: SUBJECT
Columns: sub_code, sub_name

Table: ENROLLMENT
Columns: stu_no, sub_code, marks
Now, let's proceed with the queries:

Find the name of the student with the highest marks.
sql
Copy code
SELECT S.name
FROM STUDENT S
JOIN ENROLLMENT E ON S.stu_no = E.stu_no
ORDER BY E.marks DESC
LIMIT 1;
Display names of the students according to their subjects.
sql
Copy code
SELECT S.name, SB.sub_name
FROM STUDENT S
JOIN ENROLLMENT E ON S.stu_no = E.stu_no
JOIN SUBJECT SB ON E.sub_code = SB.sub_code;
Create a view to display student name and subject name where marks obtained are above 75.
sql
Copy code
CREATE VIEW HighMarksView AS
SELECT S.name AS student_name, SB.sub_name AS subject_name
FROM STUDENT S
JOIN ENROLLMENT E ON S.stu_no = E.stu_no
JOIN SUBJECT SB ON E.sub_code = SB.sub_code
WHERE E.marks > 75;
This view will display the student name and subject name where marks obtained are above 75.

Display records of students where the date of birth is null.
sql
Copy code
SELECT *
FROM STUDENT
WHERE date_of_birth IS NULL;

Q^]

Table: SUPPLIER
Columns: supplier_id, name, city

Table: PART
Columns: part_no, part_name, supplier_id, color, cost
Now, let's proceed with the queries:

Find the suppliers who live in the same city.
sql
Copy code
SELECT S1.name AS supplier1, S2.name AS supplier2
FROM SUPPLIER S1, SUPPLIER S2
WHERE S1.city = S2.city AND S1.supplier_id < S2.supplier_id;
Display details of the part that has the maximum cost.
sql
Copy code
SELECT *
FROM PART
WHERE cost = (SELECT MAX(cost) FROM PART);
Display all part details belonging to a particular supplier.
sql
Copy code
SELECT *
FROM PART
WHERE supplier_id = 'your_supplier_id_here';

Q7]

Table: MEMBERS
Columns: mem_id, name, age, gender

Table: BOOKS
Columns: book_id, title, author, price, publisher

Table: RESERVES
Columns: mem_id, book_id, date
Now, let's proceed with the queries:

Find the members who have reserved books between 01 July 2013 and 15 July 2013.
sql
Copy code
SELECT M.*
FROM MEMBERS M
JOIN RESERVES R ON M.mem_id = R.mem_id
WHERE R.date BETWEEN '2013-07-01' AND '2013-07-15';
Find the number of female members.
sql
Copy code
SELECT COUNT(*)
FROM MEMBERS
WHERE gender = 'female';
Display details of books reserved by members having age above 55.
sql
Copy code
SELECT B.*
FROM BOOKS B
JOIN RESERVES R ON B.book_id = R.book_id
JOIN MEMBERS M ON R.mem_id = M.mem_id
WHERE M.age > 55;
Perform a left outer join on BOOKS and MEMBERS.
sql
Copy code
SELECT *
FROM BOOKS
LEFT OUTER JOIN MEMBERS ON BOOKS.book_id = MEMBERS.mem_id;

Q8]

Table: STUDENT
Columns: stu_code, name, subject, prof_code

Table: PROFESSOR
Columns: prof_code, prof_name, qualification, experience
Now, let's proceed with the queries:

Display details of professors who are either ME or MTech and with at least 8 years of experience.
sql
Copy code
SELECT *
FROM PROFESSOR
WHERE (qualification = 'ME' OR qualification = 'MTech') AND experience >= 8;
Count the number of students appearing for the subject ‘DBMS’.
sql
Copy code
SELECT COUNT(*)
FROM STUDENT
WHERE subject = 'DBMS';
Find the professor who teaches the course ‘Computer Programming’.
sql
Copy code
SELECT *
FROM PROFESSOR
WHERE prof_code = (SELECT prof_code FROM STUDENT WHERE subject = 'Computer Programming' LIMIT 1);
These queries should give you the desired information. Let me know if there's anything else you'd like to adjust or if you have further questions!




Q9]Table: MATCH
Columns: match_id, team1, team2, date, ground, winner

Table: PLAYER
Columns: player_id, name, country, first_test_date

Table: BATTING
Columns: match_id, player_id, num_of_runs, fours, six
Now, let's proceed with the queries:

Find the date of the matches played between ‘India’ and ‘Australia’.
sql
Copy code
SELECT date
FROM MATCH
WHERE (team1 = 'India' AND team2 = 'Australia') OR (team1 = 'Australia' AND team2 = 'India');
Find the number of runs, fours, and sixes scored by ‘Sachin’ in M20.
sql
Copy code
SELECT num_of_runs, fours, six
FROM BATTING B
JOIN PLAYER P ON B.player_id = P.player_id
WHERE P.name = 'Sachin' AND B.match_id = 'M20';
Create a view that displays matches played on ‘Lords’ along with the winner.
sql
Copy code
CREATE VIEW LordsMatches AS
SELECT match_id, winner
FROM MATCH
WHERE ground = 'Lords';
Find the country of the player who has scored the highest number of runs.
sql
Copy code
SELECT country
FROM PLAYER
WHERE player_id = (SELECT player_id FROM BATTING ORDER BY num_of_runs DESC LIMIT 1);
Th

Q10]
Table: STUDENT
Columns: stu_code, name, subject, prof_code

Table: PROFESSOR
Columns: prof_code, prof_name, qualification, experience, salary
Now, for the queries:

Display the name of professors who are either ME or MTech and with at least 8 years of experience.
sql
Copy code
SELECT prof_name
FROM PROFESSOR
WHERE (qualification = 'ME' OR qualification = 'MTech') AND experience >= 8;
Creating a row-level trigger for the PROFESSOR table that displays the salary difference between old and new values.
sql
Copy code
CREATE OR REPLACE TRIGGER salary_diff_trigger
BEFORE INSERT OR UPDATE OR DELETE ON PROFESSOR
FOR EACH ROW
DECLARE
    old_salary NUMBER;
BEGIN
    IF UPDATING OR DELETING THEN
        old_salary := :OLD.salary;
        DBMS_OUTPUT.PUT_LINE('Salary Difference: ' || :NEW.salary - old_salary);
    ELSIF INSERTING THEN
        DBMS_OUTPUT.PUT_LINE('New Professor Added');
    END IF;
END;
/
This trigger will display the salary difference between old and new values for updates or the fact that a new professor is added for inserts.

Find the number of professors who teach the course ‘Computer Programming’.
sql
Copy code
SELECT COUNT(DISTINCT prof_code)
FROM STUDENT
WHERE subject = 'Computer Programming';

q11]Table: EMPLOYEE
Columns: Emp_no, E_name, E_address, E_ph_no, Dept_no, Dept_name, Job_id, Designation, Salary
Now, for the queries:

List the employees in ascending order of Designations of those who joined after 1981.
sql
Copy code
SELECT *
FROM EMPLOYEE
WHERE YEAR(joined_date) > 1981
ORDER BY Designation ASC;
Assuming there's a column joined_date that represents the date of joining.

List the employees who are either ‘CLERK’ or ‘ANALYST’.
sql
Copy code
SELECT *
FROM EMPLOYEE
WHERE Job_id IN ('CLERK', 'ANALYST');
List the Enames those are starting with ‘S’.
sql
Copy code
SELECT E_name
FROM EMPLOYEE
WHERE E_name LIKE 'S%';
Display all the details of the employee whose salary is more than the salary of any IT PROFF.
sql
Copy code
SELECT *
FROM EMPLOYEE
WHERE Salary > (SELECT MAX(Salary) FROM EMPLOYEE WHERE Job_id = 'IT PROFF');
Thes

Q12]
-- Create User
CREATE USER 'user1'@'localhost' IDENTIFIED BY 'password';

-- Grant SELECT, INSERT, UPDATE, DELETE privileges on Emp table
GRANT SELECT, INSERT, UPDATE, DELETE ON database_name.Emp TO 'user1'@'localhost';

-- Grant SELECT, INSERT, UPDATE, DELETE privileges on Dept table
GRANT SELECT, INSERT, UPDATE, DELETE ON database_name.Dept TO 'user1'@'localhost';
Replace 'database_name' with the actual name of your database.

Develop a query to grant all privileges of the employees table into the departments table.
sql
Copy code
GRANT ALL PRIVILEGES ON database_name.Emp TO database_name.Dept;
Develop a query to grant some privileges of the employees table into the departments table.
sql
Copy code
GRANT SELECT, INSERT, UPDATE ON database_name.Emp TO database_name.Dept;
Develop a query to revoke all privileges of the employees table from the departments table.
sql
Copy code
REVOKE ALL PRIVILEGES ON database_name.Emp FROM database_name.Dept;
Develop a query to revoke some privileges of the employees table from the departments table.
sql
Copy code
REVOKE SELECT, INSERT, UPDATE ON database_name.Emp FROM database_name.Dept;


Q13]

CREATE TABLE Emp (
    EmpNo INT PRIMARY KEY,
    EmpName VARCHAR(50),
    Job VARCHAR(50),
    Basic DECIMAL(10, 2),
    DA DECIMAL(10, 2),
    HRA DECIMAL(10, 2),
    PF DECIMAL(10, 2),
    GrossPay DECIMAL(10, 2),
    NetPay DECIMAL(10, 2)
);

-- Calculate DA as 30% of Basic and HRA as 40% of Basic
UPDATE Emp
SET DA = Basic * 0.3, HRA = Basic * 0.4;
Insert five records and calculate GrossPay and NetPay:
sql
Copy code
INSERT INTO Emp VALUES
(1, 'John', 'Manager', 5000, 0, 0, 0, 0, 0),
(2, 'Alice', 'Engineer', 6000, 0, 0, 0, 0, 0),
(3, 'Bob', 'Clerk', 4000, 0, 0, 0, 0, 0),
(4, 'Eva', 'Technician', 5500, 0, 0, 0, 0, 0),
(5, 'Charlie', 'Analyst', 7000, 0, 0, 0, 0, 0);

-- Calculate GrossPay and NetPay
UPDATE Emp
SET GrossPay = Basic + DA + HRA,
    NetPay = Basic + DA + HRA - PF;
Display the employees whose Basic is the lowest in each department:
sql
Copy code
SELECT *
FROM Emp E1
WHERE Basic = (SELECT MIN(Basic) FROM Emp E2 WHERE E1.Job = E2.Job);
If NetPay is less than Rs. 10,000, add Rs. 1200 as special allowances:
sql
Copy code
UPDATE Emp
SET NetPay = NetPay + 1200
WHERE NetPay < 10000;
Display the employees whose GrossPay lies between 10,000 and 20,000:
sql
Copy code
SELECT *
FROM Emp
WHERE GrossPay BETWEEN 10000 AND 20000;
Display all the employees who earn the maximum salary:
sql
Copy code
SELECT *
FROM Emp
WHERE GrossPay = (SELECT MAX(GrossPay) FROM Emp);

Q14]
CREATE TABLE EMP (
    EMPNO NUMBER(6),
    ENAME VARCHAR2(20) NOT NULL,
    JOB VARCHAR2(10) NOT NULL,
    DEPTNO NUMBER(3),
    SAL NUMBER(7, 2),
    CONSTRAINT emp_empno_check CHECK (EMPNO > 100),
    CONSTRAINT emp_deptno_unique UNIQUE (DEPTNO),
    CONSTRAINT emp_pk PRIMARY KEY (EMPNO)
);
Allow NULL for all columns except ENAME and JOB.

Add constraints to check, while entering the EMPNO value (i.e.) EMPNO > 100.

This is already added in the CREATE TABLE statement using the CHECK constraint.
Define the field DEPTNO as unique.

This is already added in the CREATE TABLE statement using the UNIQUE constraint.
Create a primary key constraint for the table (EMPNO).

This is already added in the CREATE TABLE statement using the PRIMARY KEY constraint.
Insert 5 records:

sql
Copy code
INSERT INTO EMP VALUES (101, 'John', 'Manager', 10, 5000);
INSERT INTO EMP VALUES (102, 'Alice', 'Engineer', 20, 6000);
INSERT INTO EMP VALUES (103, 'Bob', 'Clerk', 10, 4000);
INSERT INTO EMP VALUES (104, 'Eva', 'Technician', 30, 5500);
INSERT INTO EMP VALUES (105, 'Charlie', 'Analyst', 20, 7000);
These commands should create the table EMP with the specified structure, constraints, and insert 5 records. Let me know if you need any further clarification or adjustments!


Q15

CREATE USER your_username IDENTIFIED BY your_password;
GRANT ALL PRIVILEGES TO your_username;
Replace your_username and your_password with the desired username and password.

Create the database schema for the STUDENT table:
sql
Copy code
CREATE TABLE STUDENT (
    stu_code INT PRIMARY KEY,
    name VARCHAR(50),
    subject VARCHAR(50),
    prof_code INT
);
Insert values into the table and use commit:
sql
Copy code
INSERT INTO STUDENT VALUES (1, 'John', 'Math', 101);
INSERT INTO STUDENT VALUES (2, 'Alice', 'Physics', 102);
COMMIT;
Add a savepoint after the insertion of records and verify the savepoint:
sql
Copy code
SAVEPOINT insertion_savepoint;
-- Perform additional operations or insertions if needed
ROLLBACK TO insertion_savepoint;
-- This will undo operations after the savepoint
Delete any three records in the STUDENT table and use rollback:
sql
Copy code
DELETE FROM STUDENT WHERE stu_code = 1;
DELETE FROM STUDENT WHERE stu_code = 2;
DELETE FROM STUDENT WHERE stu_code = 3;
COMMIT; -- Use commit if you are satisfied with the changes
-- or ROLLBACK; -- Use rollback to undo all changes
Add constraint primary key and foreign key to the table:
sql
Copy code
ALTER TABLE STUDENT
ADD CONSTRAINT pk_stu_code PRIMARY KEY (stu_code);

ALTER TABLE STUDENT
ADD CONSTRAINT fk_prof_code FOREIGN KEY (prof_code)
REFERENCES PROFESSOR(prof_code);
Assuming there is a PROFESSOR table with a prof_code.

Make sure to replace your_username and your_password with your actual username and password, and adjust the schema according to your requirements.

Let me know if you need further clarification or assistance!

//20
-- 1. Create the tables
CREATE TABLE Department (
    DeptId INT PRIMARY KEY,
    Dname VARCHAR(100) NOT NULL
);

CREATE TABLE Employee (
    Eid INT PRIMARY KEY,
    Ename VARCHAR(100),
    Job VARCHAR(100),
    Salary DECIMAL(10, 2) CHECK (Salary >= 10000),
    DeptId INT,
    FOREIGN KEY (DeptId) REFERENCES Department(DeptId)
);

-- 2. Display all the employees who earn more than average salary
SELECT * 
FROM Employee 
WHERE Salary > (SELECT AVG(Salary) FROM Employee);

-- 3. Display the fields Eid, Ename and Dname
SELECT E.Eid, E.Ename, D.Dname 
FROM Employee E 
JOIN Department D ON E.DeptId = D.DeptId;

-- 4. Sort the employee table in the descending order of salaries
SELECT * 
FROM Employee 
ORDER BY Salary DESC;

-- 5. List all the job designations in the employee table without repetitions
SELECT DISTINCT Job 
FROM Employee;

-- 6. Display all the employee details Department wise and in the ascending order of their salaries
SELECT E.*, D.Dname 
FROM Employee E 
JOIN Department D ON E.DeptId = D.DeptId 
ORDER BY D.Dname, E.Salary;

-- 7. Display all the clerks in DeptId D2
SELECT * 
FROM Employee 
WHERE Job = 'clerk' AND DeptId = 'D2';

//19

-- 1. Create the tables
CREATE TABLE emp (
    eno INT PRIMARY KEY,
    ename VARCHAR(100),
    bdate DATE,
    title VARCHAR(100),
    salary DECIMAL(10, 2),
    dno INT
);

CREATE TABLE proj (
    pno INT PRIMARY KEY,
    pname VARCHAR(100),
    budget DECIMAL(10, 2),
    dno INT
);

CREATE TABLE dept (
    dno INT PRIMARY KEY,
    dname VARCHAR(100),
    mgreno INT
);

CREATE TABLE workson (
    eno INT,
    pno INT,
    resp VARCHAR(100),
    hours INT,
    PRIMARY KEY (eno, pno)
);

-- 2. Project name, hours worked, and project number for all works on records where hours > 10
SELECT P.pname, W.hours, W.pno 
FROM proj P 
JOIN workson W ON P.pno = W.pno 
WHERE W.hours > 10;

-- 3. Project name, department name, and budget for all projects with a budget < $50,000
SELECT P.pname, D.dname, P.budget 
FROM proj P 
JOIN dept D ON P.dno = D.dno 
WHERE P.budget < 50000;

-- 4. Employee numbers and salaries of all employees in the 'Consulting' department ordered by descending salary
SELECT E.eno, E.salary 
FROM emp E 
JOIN dept D ON E.dno = D.dno 
WHERE D.dname = 'Consulting' 
ORDER BY E.salary DESC;

-- 5. Employee name, project name, employee title, and hours for all works on records
SELECT E.ename, P.pname, E.title, W.hours 
FROM emp E 
JOIN workson W ON E.eno = W.eno 
JOIN proj P ON W.pno = P.pno;
//18

-- 1. Create the tables
CREATE TABLE emp (
    eno INT PRIMARY KEY,
    ename VARCHAR(100),
    bdate DATE,
    title VARCHAR(100),
    salary DECIMAL(10, 2),
    dno INT
);

CREATE TABLE proj (
    pno INT PRIMARY KEY,
    pname VARCHAR(100),
    budget DECIMAL(10, 2),
    dno INT
);

CREATE TABLE dept (
    dno INT PRIMARY KEY,
    dname VARCHAR(100),
    mgreno INT
);

CREATE TABLE workson (
    eno INT,
    pno INT,
    resp VARCHAR(100),
    hours INT,
    PRIMARY KEY (eno, pno)
);

-- 2. Project number and name for projects with a budget greater than $100,000
SELECT pno, pname 
FROM proj 
WHERE budget > 100000;

-- 3. All works on records where hours worked is less than 10 and the responsibility is 'Manager'
SELECT * 
FROM workson 
WHERE hours < 10 AND resp = 'Manager';

-- 4. Employees (number and name only) who have a title of 'EE' or 'SA' and make more than $35,000
SELECT eno, ename 
FROM emp 
WHERE title IN ('EE', 'SA') AND salary > 35000;

-- 5. Employee name, department name, and employee Title
SELECT E.ename, D.dname, E.title 
FROM emp E 
JOIN dept D ON E.dno = D.dno;

//17

import java.sql.*;

public class Main {
    public static void main(String[] args) {
        try {
            // 1. Implement JDBC connectivity program
            Class.forName("com.mysql.jdbc.Driver");
            Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/myDatabase", "username", "password");

            // 2. Create the Students table
            Statement stmt = con.createStatement();
            String sql = "CREATE TABLE Students " +
                         "(Student_ID INT PRIMARY KEY NOT NULL, " +
                         " Student_Name VARCHAR(255) NOT NULL, " + 
                         " Age INT NOT NULL, " + 
                         " City VARCHAR(255) DEFAULT 'Delhi' NOT NULL)";
            stmt.executeUpdate(sql);

            // 3. Alter the Students table, and add a new column of DOB
            sql = "ALTER TABLE Students ADD COLUMN DOB DATE";
            stmt.executeUpdate(sql);

            // 4. The Student_ID, and Student_Name must be unique for each and every record
            sql = "ALTER TABLE Students ADD CONSTRAINT unique_id_name UNIQUE (Student_ID,Student_Name)";
            stmt.executeUpdate(sql);

            // 5. Insert 5 records
            sql = "INSERT INTO Students (Student_ID, Student_Name, Age, City) VALUES (?, ?, ?, ?)";
            PreparedStatement pstmt = con.prepareStatement(sql);
            for (int i = 1; i <= 5; i++) {
                pstmt.setInt(1, i);
                pstmt.setString(2, "Student" + i);
                pstmt.setInt(3, 20 + i);
                pstmt.setString(4, "City" + i);
                pstmt.executeUpdate();
            }

            // 6. Drop unique constraints
            sql = "ALTER TABLE Students DROP INDEX unique_id_name";
            stmt.executeUpdate(sql);

            con.close();
        } catch (Exception e) {
            System.out.println(e);
        }
    }
}

//16

-- 1. Create a user and grant all permissions to the user.
CREATE USER 'newuser'@'localhost' IDENTIFIED BY 'password';
GRANT ALL PRIVILEGES ON *.* TO 'newuser'@'localhost';

-- 2. Create the following database schema:
CREATE TABLE STUDENT (
    stu_code INT PRIMARY KEY,
    name VARCHAR(100),
    subject VARCHAR(100),
    prof_code INT
);

-- 3. Insert values into the table and use commit.
INSERT INTO STUDENT (stu_code, name, subject, prof_code) VALUES (1, 'John Doe', 'Math', 101);
COMMIT;

-- 4. Add save point after insertion of records and verify save point.
SAVEPOINT savepoint1;
SELECT * FROM STUDENT;

-- 5. Delete any three records in the department table and use rollback.
-- Assuming you have a DEPARTMENT table
DELETE FROM DEPARTMENT LIMIT 3;
ROLLBACK;

-- 6. Add constraint primary key and foreign key to the table.
-- Assuming you have a PROFESSOR table with prof_code as a primary key
ALTER TABLE STUDENT
ADD CONSTRAINT FK_Professor
FOREIGN KEY (prof_code) REFERENCES PROFESSOR(prof_code);


